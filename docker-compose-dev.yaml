services:
  db:
    image: postgres:16
    container_name: postgres-db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - ./pgdata:/var/lib/postgresql/data
      - ./sql/db_init.sql:/docker-entrypoint-initdb.d/db_init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    command: >
      /bin/bash -c "
      rm -rf /var/lib/postgresql/data/* &&
      docker-entrypoint.sh postgres &

      pid=$!

      until pg_isready -U ${DB_USER}; do
        sleep 1
      done

      psql -U ${DB_USER} -d ${DB_NAME} -f /docker-entrypoint-initdb.d/db_init.sql

      wait $pid
      "

  pgadmin:
    image: dpage/pgadmin4:7.7
    container_name: pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASS}
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      - db
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped

  bot:
    image: python:3.11-slim
    container_name: bot
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      - PGADMIN_PORT=${PGADMIN_PORT}
      - COVERAGE_PORT=${COVERAGE_PORT}
    depends_on:
      db:
        condition: service_healthy
    working_dir: /app
    ports:
      - "${COVERAGE_PORT}:8000"
    volumes:
      - ./:/app:delegated
    env_file:
      - .env
    command: bash
    tty: true
    stdin_open: true

volumes:
  pgdata:
  pgadmin_data:
